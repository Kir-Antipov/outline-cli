#!/bin/sh
#
# Manage Shadowsocks server connections and related access keys.

#################################################
#            Configure app details.             #
#################################################
APP_NAME="outline"
APP_VERSION="2.1.1"
APP_DIRECTORY="/var/lib/${APP_NAME}"

#################################################
#             Configure file paths.             #
#################################################
CONFIG_FILENAME="${APP_DIRECTORY}/config.json"
STATE_FILENAME="${APP_DIRECTORY}/state.json"
LOG_FILENAME="${APP_DIRECTORY}/log.txt"

#################################################
#            Configure notifications.           #
#################################################
NOTIFICATION_TITLE=""
NOTIFICATION_TIMEOUT=""
NOTIFICATION_BODY_CONNECTED=""
NOTIFICATION_BODY_DISCONNECTED=""
NOTIFICATION_BODY_DISCONNECTED_UNKNOWN=""
NOTIFICATION_ICON_SUCCESS=""
NOTIFICATION_ICON_FAILURE=""
NOTIFICATION_ICON_CONNECTED=""
NOTIFICATION_ICON_DISCONNECTED=""

#################################################
# Ensures that the config file exists.
# Arguments:
#   None
#################################################
init_config() {
  [ -f "${CONFIG_FILENAME}" ] && return

  mkdir -m 700 -p "$(dirname "${CONFIG_FILENAME}")" &&
  touch "${CONFIG_FILENAME}" &&
  chmod 600 "${CONFIG_FILENAME}" &&
  cat "${APP_DIRECTORY}/storage" 2> /dev/null | jq -Rs '{
    keys: .
      | split("\n") | map(.
        | split("=") | select(length > 1)
        | [(.[0] | gsub("%20";"=";"g")), (.[1:] | join("="))])
      | to_entries | map({ id: (.key + 1), name: .value[0], url: .value[1] }),
    remotes: [],
    notifications: {
      title: "Outline",
      timeout: 5000,
      messages: {
        connected: "Connected to %name% (%ip%)",
        disconnected: "Disconnected from %name% (%ip%)",
        disconnected_unknown: "Disconnected"
      },
      icons: {
        success: "dialog-positive",
        failure: "dialog-error",
        connected: "network-wireless",
        disconnected: "network-offline"
      }
    },
    exclude: [
      "192.168.0.0/16",
      "172.16.0.0/12",
      "10.0.0.0/8",
      "!10.233.233.0/24",
      ":22"
    ]
  }' > "${CONFIG_FILENAME}" &&
  rm -f "${APP_DIRECTORY}/storage"
}

#################################################
# Ensures that the state file exists.
# Arguments:
#   None
#################################################
init_state() {
  [ -f "${STATE_FILENAME}" ] && return

  mkdir -m 700 -p "$(dirname "${STATE_FILENAME}")" &&
  touch "${STATE_FILENAME}" &&
  chmod 600 "${STATE_FILENAME}" &&
  jq -n '{ status: "disconnected", key_id: null }' > "${STATE_FILENAME}" &&
  rm -f "${APP_DIRECTORY}/session"
}

#################################################
# Ensures that the log file exists.
# Arguments:
#   None
#################################################
init_log() {
  [ -f "${LOG_FILENAME}" ] && return

  mkdir -m 700 -p "$(dirname "${LOG_FILENAME}")" &&
  touch "${LOG_FILENAME}" &&
  chmod 640 "${LOG_FILENAME}" &&
  rm -f "/var/log/${APP_NAME}"
}

#################################################
# Initializes notification settings.
# Arguments:
#   None
#################################################
init_notifications() {
  eval "$(jq -r '
    (.notifications // {}) as $n |
    ($n.messages // {}) as $m |
    ($n.icons // {}) as $i |
    "NOTIFICATION_TITLE=\(($n.title // "Outline")|@sh)",
    "NOTIFICATION_TIMEOUT=\(($n.timeout // 5000)|@sh)",
    "NOTIFICATION_BODY_CONNECTED=\(($m.connected // "Connected to %name% (%ip%)")|@sh)",
    "NOTIFICATION_BODY_DISCONNECTED=\(($m.disconnected // "Disconnected from %name% (%ip%)")|@sh)",
    "NOTIFICATION_BODY_DISCONNECTED_UNKNOWN=\(($m.disconnected_unknown // "Disconnected")|@sh)",
    "NOTIFICATION_ICON_SUCCESS=\(($i.success // "dialog-positive")|@sh)",
    "NOTIFICATION_ICON_FAILURE=\(($i.failure // "dialog-error")|@sh)",
    "NOTIFICATION_ICON_CONNECTED=\(($i.connected // "network-wireless")|@sh)",
    "NOTIFICATION_ICON_DISCONNECTED=\(($i.disconnected // "network-offline")|@sh)"
  ' "${CONFIG_FILENAME}")"
}

#################################################
# Formats and prints the provided error message.
# Arguments:
#   $1. The error message to format and print.
# Outputs:
#   Writes the formatted error message to stderr.
# Returns:
#   Always returns 1.
#################################################
error() {
  echo "${0}: ${1}" >& 2
  return 1
}

#################################################
# Checks if the specified command exists.
# Arguments:
#   $1. The command to check.
# Returns:
#   0 if the specified command exists;
#   otherwise, a non-zero status.
#################################################
command_exists() {
  command -v "${1}" > /dev/null 2>& 1
}

#################################################
# Overwrites a specified file with the contents
# from stdin, maintaining the file permissions.
# Arguments:
#   $1. The filename to overwrite.
# Inputs:
#   Reads new content from stdin.
# Outputs:
#   Writes the new content to the specified file.
#################################################
overwrite() {
  awk 'BEGIN{RS="";getline<"-";print>ARGV[1]}' "${1}"
}

#################################################
# Downloads a file.
# Arguments:
#   $1. The URL of the file to download.
#   $2. The destination of the downloaded file.
#       If not provided, the file will be written
#       to stdout.
# Returns:
#   0 if the operation succeeds;
#   otherwise, a non-zero status.
#################################################
download() {
  if command_exists wget; then
    wget -O "${2:-"-"}" "${1}"
  elif command_exists curl; then
    curl -Lo "${2:-"-"}" "${1}"
  fi
}

#################################################
# Decodes a percent-encoded URI component.
# Arguments:
#   None
# Inputs:
#   Reads the encoded URI component from stdin.
# Outputs:
#   Writes the decoded string to stdout.
#################################################
urid() {
  printf "%b" "$(sed -E 's/%([a-fA-F0-9]{2})/\\\x\1/g')"
}

#################################################
# Sends a desktop notification.
# Arguments:
#   $1. The title of the notification.
#   $2="". The body of the notification.
#   $3="". The icon of the notification.
#   $4=3000. The duration of the notification.
# Returns:
#   0 if the notification has been sent;
#   otherwise, a non-zero status.
#################################################
send_notification() {
  local display_id="$(ls /tmp/.X11-unix/X* 2> /dev/null | head -n 1 | sed -E 's|/tmp/.X11-unix/X([0-9]*).*|\1|')"
  local display=":${display_id:-0}"
  local display_user="$(who | grep "(${display})\|(login screen)" | head -n 1 | sed 's/\s.*//')"
  local display_user_id="$(id -u "${display_user}" 2> /dev/null)"

  if command_exists notify-send; then
    sudo -u "${display_user}" \
      DISPLAY="${display}" \
      DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/${display_user_id}/bus \
      notify-send -a "${1}" -i "${3}" -t "${4:-3000}" "${1}" "${2}"
  elif command_exists kdialog; then
    sudo -u "${display_user}" \
      DISPLAY="${display}" \
      DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/${display_user_id}/bus \
      kdialog --passivepopup "${2}" "$((${4:-3000} / 1000))" --title "${1}" --icon "${3}"
  else
    return 1
  fi > /dev/null 2>& 1
}

#################################################
# Asserts that the current user is "root" (i.e.,
# a superuser). Otherwise, terminates the current
# process.
# Arguments:
#   None
# Outputs:
#   Writes the error message, if any, to stderr.
# Returns:
#   0 if the current user is a superuser;
#   otherwise, never returns (exits the shell
#   with a status of 1).
#################################################
assert_is_root() {
  [ "${EUID:-"$(id -u)"}" -eq 0 ] && return

  error "cannot query current connection status: Permission denied"
  exit 1
}

#################################################
# Checks if the given string is a valid
# Shadowsocks URI.
# Arguments:
#   $1. The string to check.
# Returns:
#   0 if the string is a valid Shadowsocks URI;
#   otherwise, a non-zero status.
#################################################
is_ss() {
  echo "${1}" | grep -qE '^ss://[a-zA-Z0-9+/]+={0,3}@.+:[0-9]{1,5}(/.*)?(#.*)?$'
}

#################################################
# Checks if the given string is a valid
# base64-encoded Shadowsocks URI.
# Arguments:
#   $1. The string to check.
# Returns:
#   0 if the given string is a valid
#   base64-encoded Shadowsocks URI;
#   otherwise, a non-zero status.
#################################################
is_ss64() {
  echo "${1}" | grep -qE '^ss://[a-zA-Z0-9+/]+={0,3}(/.*)?(#.*)?$'
}

#################################################
# Checks if the given string is a valid
# Shadowsocks configuration URI.
# Arguments:
#   $1. The string to check.
# Returns:
#   0 if the given string is a valid
#   Shadowsocks configuration URI;
#   otherwise, a non-zero status.
#################################################
is_ssconf() {
  echo "${1}" | grep -qE '^ssconf://.+'
}

#################################################
# Checks if the given string is a valid JSON
# object.
# Arguments:
#   $1. The string to check.
# Returns:
#   0 if the given string is a valid JSON object;
#   otherwise, a non-zero status.
#################################################
is_json() {
  echo "${1}" | grep -qE '^\s*{'
}

#################################################
# Checks if the given string is a valid transport
# (i.e., the server access key).
# Arguments:
#   $1. The transport string to check.
# Returns:
#   0 if the given string is a valid transport;
#   otherwise, a non-zero status.
#################################################
is_valid_transport() {
  is_ss "${1}" || is_ss64 "${1}" || is_ssconf "${1}"
}

#################################################
# Normalizes the given access key by converting
# it to its actual static representation.
# Arguments:
#   $1. The key to normalize.
# Outputs:
#   Writes the normalized key to stdout.
#################################################
normalize_key() {
  if is_ss "${1}"; then
    echo "${1}"
  elif is_ss64 "${1}"; then
    ss642ss "${1}"
  elif is_ssconf "${1}"; then
    ssconf2ss "${1}"
  elif is_json "${1}"; then
    json2ss "${1}"
  else
    echo "${1}"
  fi | sed 's/[=]*@/@/'
}

#################################################
# Converts an encoded Shadowsocks URI to its
# standard Shadowsocks URI format.
# Arguments:
#   $1. The encoded Shadowsocks URI.
# Outputs:
#   Writes the Shadowsocks URI to stdout.
#################################################
ss642ss() {
  echo "${1}" | jq -Rr '.
    | sub("ss://"; "")
    | split("#") | (.[1] |= ([.] | map(select(.) | "#\(.)")[0] // ""))
    | (.[0] |= split("/")) | (.[0][1] |= ([.] | map(select(.) | "/\(.)")[0] // ""))
    | (.[0][0] |= (@base64d | sub("\\s"; "") | split(":|@"; null)))
    | flatten
    | "ss://\("\(.[0]):\(.[1])"|@base64)@\(.[2]):\(.[3])\(.[4])\(.[5])"'
}

#################################################
# Converts a dynamic access key to its actual
# static representation.
# Arguments:
#   $1. The dynamic key to convert.
# Outputs:
#   Writes the normalized static key to stdout.
#################################################
ssconf2ss() {
  normalize_key "$(download "$(echo "${1}" | sed 's|ssconf://|https://|')" 2> /dev/null)"
}

#################################################
# Converts a JSON representation of a Shadowsocks
# configuration to its URI format.
# Arguments:
#   $1. The JSON string representing
#       the Shadowsocks configuration.
# Outputs:
#   Writes the Shadowsocks URI to stdout.
#################################################
json2ss() {
  echo "${1}" | jq -r '"ss://\("\(.method):\(.password)"|@base64)@\(.server):\(.server_port)\([.prefix]|map(select(.)|"#\(@uri)")[0]//"")"'
}

#################################################
# Formats and prints all access key entries based
# on the provided format string.
# The formats available for substitution are:
#   %name%  - replaced with the access key name
#   %ip%    - replaced with the access key IP
#   %index% - replaced with the access key ID
# Arguments:
#   $1. A composite format string.
#   $2. A JSON file containing access keys.
# Inputs:
#   If $2 is omitted, reads the access key
#   entries to format from stdin.
#################################################
format_keys() {
  jq -r --arg format "${1}" '
    (if (.id|type) == "number" then . else .keys[]? end) as $key |
    $format
      | split("%index%") | join($key.id|tostring)
      | split("%name%") | join($key.name)
      | split("%ip%") | join(($key.access_url // $key.url)
      | capture(".*@(?<ip>.+:[0-9]{1,5})(/|#|$).*").ip? // "N/A")' "${2:-"-"}"
}

#################################################
# Prints the given access key entry according to
# the provided format string.
# Arguments:
#   $1. A composite format string.
#   $2. The access key entry to format.
# Outputs:
#   Writes the formatted entry to stdout.
#################################################
format_key() {
  echo "${2}" | format_keys "${1}"
}

#################################################
# Infers the name of the given key.
# Arguments:
#   $1. The key to infer the name for.
# Outputs:
#   Writes the inferred name to stdout.
#################################################
infer_key_name() {
  if echo "${1}" | grep -qF '#'; then
    echo "${1}" | sed 's/[^#]*#//' | urid
  else
    echo "${1}" | grep -oE '@.+:[0-9]{1,5}(/|#|$)' | grep -oE '[^@]+:[0-9]+'
  fi
}

#################################################
# Retrieves an access key entry by name or index.
# Arguments:
#   $1. The name/index of the access key to get.
# Outputs:
#   Writes the found key, if any, to stdout.
# Returns:
#   0 if the access key was found;
#   otherwise, a non-zero status.
#################################################
get_key_entry() {
  jq -ce --arg query "${1}" '
    (try ($query|tonumber) catch ($query|ascii_downcase)) as $q |
    first(.keys[]? | select((.id == $q) or ((.name|ascii_downcase) == $q)))
  ' "${CONFIG_FILENAME}"
}

#################################################
# Adds a new access key to the storage.
# Arguments:
#   $1. The access key to store.
#   $2. The name of the access key.
#   $3. The access url associated with the key.
# Returns:
#   0 if the access key was added;
#   otherwise, a non-zero status.
#################################################
add_key() {
  is_valid_transport "${1}" || return
  local access_url="${3:-"$(normalize_key "${1}")"}"
  local name="${2:-"$(infer_key_name "${access_url}")"}"

  jq --arg name "${name}" --arg url "${1}" --arg access_url "${access_url}" '
    ($name|ascii_downcase) as $q |
    (.keys // []) as $k |
    (
      first($k[] | select((.id == $q) or ((.name|ascii_downcase) == $q))).id? //
      first(range(1;$k|max_by(.id).id + 2) | select(. as $i | $k | all(.id != $i)))
    ) as $id |
    .keys |= ([
      $k | map(select(.id != $id)) | .[],
      { id: $id, name: $name, url: $url, access_url: $access_url }
    ] | sort_by(.id))
  ' "${CONFIG_FILENAME}" | overwrite "${CONFIG_FILENAME}"
}

#################################################
# Updates an existing access key entry in storage
# with the provided key details, replacing any
# existing entry with the same ID.
# Arguments:
#   $1. The access key entry to update.
# Returns:
#   0 if the access key was updated;
#   otherwise, a non-zero status.
#################################################
update_key() {
  jq --argjson key "${1}" '
    .keys |= ([. | map(select(.id != $key.id)) | .[], $key] | sort_by(.id))
  ' "${CONFIG_FILENAME}" | overwrite "${CONFIG_FILENAME}"
}

#################################################
# Removes the access key from the storage using
# its name or index.
# Arguments:
#   $1. The name/index of the key to remove.
# Returns:
#   0 if the access key was removed;
#   otherwise, a non-zero status.
#################################################
remove_key() {
  jq --arg query "${1}" '(
    (try ($query|tonumber) catch ($query|ascii_downcase)) as $q |
    (.keys|length) as $l |
    (.keys|map(select((.id != $q) and ((.name|ascii_downcase) != $q)))) as $k |
    .keys |= $k,
    (null | halt_error(if ($l == ($k|length)) then 1 else 0 end))
  )' "${CONFIG_FILENAME}" | overwrite "${CONFIG_FILENAME}"
}

#################################################
# Lists all access keys stored in the storage.
# Arguments:
#   $1="%index% %name% %ip%". The format to use
#     when printing the access keys.
# Outputs:
#   Writes the formatted access key entries
#   to stdout.
#################################################
list_keys() {
  local sep=""
  format_keys "${1:-"%index%${sep}%name%${sep}%ip%"}" "${CONFIG_FILENAME}" | {
    [ -z "${1}" ] && column -s "${sep}" -t || cat -
  }
}

#################################################
# Gets the status of the current connection.
# Arguments:
#   None
# Outputs:
#   Writes the id of the relevant access key,
#   if any, to stdout.
# Returns:
#   0 if there is an active connection;
#   1 if there is no active connection;
#   2 if the connection is temporarily suspended.
#################################################
get_status() {
  jq -r '(
    .key_id // "",
    (if (.key_id|type) == "number" then .status|ascii_downcase else "" end) as $s |
    null | halt_error(["connected", "disconnected", "suspended"] | index($s) // 1)
  )' "${STATE_FILENAME}"
}

#################################################
# Terminates or forcefully kills a process
# by its full name.
# Arguments:
#   $1. The name of the process to terminate.
#   $2="0.05". The interval to wait between
#     termination attempts (in seconds).
#   $3="50". The maximum number of termination
#     attempts.
#################################################
terminate_or_kill() {
  # Terminate the process gracefully using SIGTERM.
  pkill -TERM -x "${1}"

  # Loop until the process is terminated or maximum attempts reached.
  local termination_attempt=0
  while pgrep -x "${1}" > /dev/null && [ "${termination_attempt}" -lt "${3:-50}" ]; do
    sleep "${2:-"0.05"}"
    termination_attempt=$((${termination_attempt} + 1))
  done

  # If process still exists, forcefully kill it using SIGKILL.
  pkill -KILL -x "${1}" && pidwait -x "${1}"
}

#################################################
# Disconnects from the currently active server,
# if any. Otherwise, does nothing.
# Arguments:
#   $1="". A flag indicating wether a connection
#     should only be temporarily suspended.
#   $2="%name%". A format to use when printing
#     the access key used to establish the
#     connection.
# Outputs:
#   Writes the name of the access key used to
#   establish the connection, if any, to stdout.
# Returns:
#   0 if there was an active connection;
#   otherwise, a non-zero status.
#################################################
disconnect() {
  local key_id; key_id="$(get_status)"
  local status_id=$?
  local key_entry="$(get_key_entry "${key_id}")"
  local status_name="disconnected"
  [ -n "${1}" ] && [ "${status_id}" -ne 1 ] && status_name="suspended"

  terminate_or_kill __vpn_connect

  jq -n --arg status "${status_name}" --arg id "${key_id}" '{
    status: $status,
    key_id: (try ($id|tonumber) catch (null))
  }' > "${STATE_FILENAME}"
  [ -n "${key_entry}" ] && format_key "${2:-"%name%"}" "${key_entry}"
}

#################################################
# Connects to a Shadowsocks server using
# the specified access key.
# If no name is specified, tries to reconnect to
# the last server, if any.
# Arguments:
#   $1="". The name of the access key to use.
#   $2="%name%". A format to use when printing
#     the access key used to establish the
#     connection.
# Outputs:
#   Writes the name of the access key used to
#   establish the connection, if any, to stdout.
#   Otherwise, prints an error to stderr.
# Returns:
#   0 if the connection has been established;
#   otherwise, a non-zero status.
#################################################
connect() {
  local key_id="${1:-"$(get_status)"}"
  local key_entry="$(get_key_entry "${key_id:-1}")"
  if [ -z "${key_entry}" ]; then
    error "unknown key: ${key_id}"
    return 1
  fi

  local key_url="$(jq -rn --argjson key "${key_entry}" '$key.access_url // $key.url')"
  local access_url="$(normalize_key "${key_url}")"
  if [ "${key_url}" != "${access_url}" ]; then
    key_entry="$(jq -cn --argjson key "${key_entry}" --arg url "${access_url}" '$key | .access_url |= $url')"
    update_key "${key_entry}"
  fi

  disconnect > /dev/null 2>& 1
  /usr/local/bin/__vpn_connect -transport "${access_url}" > "${LOG_FILENAME}" 2>& 1 &
  local connection_id=$!
  sleep 1

  if ps -p "${connection_id}" > /dev/null 2>& 1; then
    jq -n --argjson key "${key_entry}" '{ status: "connected", key_id: $key.id }' > "${STATE_FILENAME}"
    format_key "${2:-"%name%"}" "${key_entry}"
  else
    error "$(tail -n 1 "${LOG_FILENAME}" | sed 's/^\[ERROR\][ 0-9/:]*//')"
  fi
}

#################################################
# Executes an action by its name.
# Arguments:
#   $1. The name of the action to execute.
#   $2="". The first action argument.
#   $3="". The second action argument.
# Outputs:
#   Writes all the relevant output to stdout.
#   Writes all errors to stderr.
# Returns:
#   0 if the action was successfully executed;
#   otherwise, a non-zero status.
#################################################
execute_action() {
  case "${1}" in
    add)
      add_key "${2}" "${3}" || error "invalid key: ${2}"
      ;;

    remove)
      remove_key "${2}" || error "unknown key: ${2}"
      ;;

    list)
      list_keys "${2}"
      ;;

    connect)
      connect "${2}" "${NOTIFICATION_BODY_CONNECTED}"
      ;;

    disconnect)
      disconnect "${2}" "${NOTIFICATION_BODY_DISCONNECTED}"
      ;;

    toggle)
      if get_status > /dev/null; then
        disconnect "" "${NOTIFICATION_BODY_DISCONNECTED}"
      else
        connect "" "${NOTIFICATION_BODY_CONNECTED}"
      fi
      ;;

    status)
      local key_id; key_id="$(get_status)"
      local status_id=$?
      local key_entry="$(get_key_entry "${key_id}")"

      if [ "${status_id}" -eq 0 ] && [ -n "${key_entry}" ]; then
        format_key "${NOTIFICATION_BODY_CONNECTED}" "${key_entry}"
      elif [ -n "${key_entry}" ]; then
        format_key "${NOTIFICATION_BODY_DISCONNECTED}" "${key_entry}"
      else
        echo "${NOTIFICATION_BODY_DISCONNECTED_UNKNOWN}"
      fi
      return "${status_id}"
      ;;

    *) return 1 ;;
  esac
}

#################################################
# Prints version information.
# Arguments:
#   None
# Outputs:
#   Writes version information to stdout.
#################################################
version() {
  echo "vpn-manager ${APP_VERSION}"
}

#################################################
# Prints a brief help message.
# Arguments:
#   None
# Outputs:
#   Writes the help message to stdout.
#################################################
help() {
  echo "Usage: ${0} <command> [<args>] [<options>]"
  echo
  echo "Manage Shadowsocks server connections and related access keys."
  echo
  echo "Examples:"
  echo "  sudo ${0} add \"ss://...\" \"Geneva\""
  echo "  sudo ${0} connect geneva"
  echo "  sudo ${0} disconnect"
  echo
  echo "Commands:"
  echo "  add <key> [<name>]        Add a new access key"
  echo "  remove <name | index>     Remove the designated access key"
  echo "  list [-f <format>]        List all stored access keys"
  echo "  connect [<name | index>]  Connect to a server"
  echo "  disconnect [-s]           Disconnect from the current server"
  echo "  toggle                    Toggle the current connection"
  echo "  status                    Return the current connection status"
  echo
  echo "Options:"
  echo "  -h, --help                Display this help text and exit"
  echo "  -v, --version             Display version information and exit"
  echo "  -q, --quiet               Suppress all normal output"
  echo "  -n, --notify              Display a notification"
  echo "  -s, --suspend             Suspend the current connection;"
  echo "                            It will be re-established later"
  echo "  -f, --format <format>     Print a key according to the <format>;"
  echo "                            The formats are: %name%, %ip%, %index%"
}

#################################################
# Formats and prints the provided error message,
# displays the help page, and terminates the
# process.
# Arguments:
#   $1. The error message to format and print.
# Outputs:
#   Writes the formatted error message to stderr.
# Returns:
#   Never returns (exits with a status of 1).
#################################################
fatal_error() {
  error "${1}"
  help >& 2
  exit 1
}

#################################################
# The main entry point for the script.
# Arguments:
#   ... A list of the command line arguments.
#################################################
main() {
  local quiet=""
  local notify=""
  local suspend=""
  local format=""
  local action=""
  local arg0=""
  local arg1=""

  # Parse the arguments and options.
  while [ -n "${1}" ]; do
    case "${1}" in
      -h|--help) help; exit 0 ;;
      -v|--version) version; exit 0 ;;
      -q|--quiet) quiet="-q" ;;
      -n|--notify) notify="-n" ;;
      -s|--suspend) suspend="-s" ;;
      -f|--format) format="${2}"; shift ;;
      -*) fatal_error "invalid option: ${1}" ;;
      *)
        if [ -z "${action}" ]; then
          action="${1}"
        elif [ -z "${arg0}" ]; then
          arg0="${1}"
        elif [ -z "${arg1}" ]; then
          arg1="${1}"
        else
          fatal_error "invalid argument: ${1}"
        fi
        ;;
    esac
    shift 2> /dev/null
  done

  # Initialize everything we need.
  init_log
  init_state
  init_config
  init_notifications

  # Validate the parsed arguments and normalize the action name.
  case "${action}" in
    add|a)
      action="add"
      [ -n "${arg0}" ] || fatal_error "missing argument: <key>"
      ;;

    remove|rm|r)
      action="remove"
      [ -n "${arg0}" ] || fatal_error "missing argument: <name | index>"
      ;;

    list|ls|l) action="list" ;;

    connect|cd|c)
      action="connect"
      NOTIFICATION_ICON_SUCCESS="${NOTIFICATION_ICON_CONNECTED}"
      ;;

    disconnect|exit|d)
      action="disconnect"
      NOTIFICATION_ICON_SUCCESS="${NOTIFICATION_ICON_DISCONNECTED}"
      ;;

    toggle|t)
      action="toggle"
      if get_status > /dev/null; then
        NOTIFICATION_ICON_SUCCESS="${NOTIFICATION_ICON_DISCONNECTED}"
      else
        NOTIFICATION_ICON_SUCCESS="${NOTIFICATION_ICON_CONNECTED}"
      fi
      ;;

    status|s)
      action="status"
      NOTIFICATION_ICON_SUCCESS="${NOTIFICATION_ICON_CONNECTED}"
      NOTIFICATION_ICON_FAILURE="${NOTIFICATION_ICON_DISCONNECTED}"
      ;;

    *) fatal_error "invalid command: ${1}" ;;
  esac

  # Everything we do requires superuser privileges.
  # So, there is no real reason to proceed without those.
  assert_is_root

  # Redirect the output to a variable, so we can decide how to display it later.
  local action_result; action_result="$(execute_action "${action}" "${arg0:-"${format:-"${suspend}"}"}" "${arg1}" 2>& 1)"
  local action_code=$?

  # Display the output.
  # Either via a notification if the "--notify" flag has been provided, or
  # just write it back to stdout.
  if [ -n "${action_result}" ]; then
    if [ -n "${notify}" ]; then
      local action_icon="$([ "${action_code}" -eq 0 ] && echo "${NOTIFICATION_ICON_SUCCESS}" || echo "${NOTIFICATION_ICON_FAILURE}")"
      send_notification "${NOTIFICATION_TITLE}" "${action_result}" "${action_icon}"
    elif [ -z "${quiet}" ]; then
      echo "${action_result}"
    fi
  fi
  exit "${action_code}"
}

main "${@}"
